}
sum_logs <- function(num) {
x = log(num) + log10(num) + log(num, base = 2)
return(x)
}
for (i in range(1:5)) {
sum_logs(2*i)
print(2*i)
}
sum_logs <- function(num) {
x = log(num) + log10(num) + log2(num)
return(x)
}
for (i in range(1:5)) {
sum_logs(2*i)
print(2*i)
}
sum_logs <- function(num) {
x = log(num) + log10(num) + log2(num)
return(x)
}
for (i in c(1:5)) {
sum_logs(2*i)
print(2*i)
}
sum_logs <- function(num) {
x = log(num) + log10(num) + log2(num)
return(x)
}
for (i in c(1:5)) {
sum_logs(2*i)
print(sum_logs(2*i))
}
big_number <- function(num) {
if (num^2 >= 100)
result("This is a big number")
else
result("This is not a big number")
}
big_number(5)
big_number <- function(num) {
if (num^2 >= 100)
result <- "This is a big number"
else
result <- "This is not a big number"
}
big_number(5)
big_number <- function(num) {
if (num^2 >= 100)
result <- "This is a big number"
else
result <- "This is not a big number"
print(result)
}
big_number(5)
big_number <- function(num) {
if (num^2 >= 100)
result <- "This is a big number"
else
result <- "This is not a big number"
print(result)
}
big_number(15)
big_number <- function(num) {
if (num^2 >= 100)
result <- "This is a big number"
else
result <- "This is not a big number"
print(result)
}
big_number(15)
big_number(5)
knitr::opts_chunk$set(echo = TRUE)
team_A <- 3
team_B <- 2
if (team_A > team_b){
print("Team A won")
} else if (team_A < team_B){
print("Team B won")
} else {
print("Team A & B tied")
}
team_A <- 3
team_B <- 2
if (team_A > team_B){
print("Team A won")
} else if (team_A < team_B){
print("Team B won")
} else {
print("Team A & B tied")
}
if (x %% 3 == 0 & x %% 5 == 0){
print("divisible by three and five")
} else if (x %% 3 == 0 & x %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
x <- 16
if (x %% 3 == 0 & x %% 5 == 0){
print("divisible by three and five")
} else if (x %% 3 == 0 & x %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
x <- 45
if (x %% 3 == 0 & x %% 5 == 0){
print("divisible by three and five")
} else if (x %% 3 == 0 & x %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
x <- 24
if (x %% 3 == 0 & x %% 5 == 0){
print("divisible by three and five")
} else if (x %% 3 == 0 & x %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
library(tidyverse)
library(tidyverse)
data(mtcars)
library(tidyverse)
data("mtcars")
View(mtcars)
library(tidyverse)
data("mpg")
force(mpg)
mpg <- mpg %>%
select(displ, cyl, cty, hwy)
mpg
output <- vector("double", ncol(mpg))
for (i in seq_along(mpg)){
output[[i]] <- var(mpg[[i]])
}
output
for (i in c(11, 13, 17, 19, 23, 29)){
print((i^3)-(i^2))
}
knitr::opts_chunk$set(echo = TRUE)
divisible_345 <- function(num) {
if (num %% 3 == = & num %% 5 == 0){
divisible_345 <- function(num) {
if (num %% 3 == & num %% 5 == 0){
divisible_345 <- function(num) {
if (num %% 3 == && num %% 5 == 0){
divisible_345 <- function(num) {
if (num %% 3 == 0 && num %% 5 == 0){
print("divisible by three and five")
} else if (num %% 3 == 0 && num %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
}
divisible_345(16)
divisible_345(45)
divisible_345(24)
setwd("~/Desktop/grad_school/spring_2024/data_613/lecture_notes")
library(tidyverse)
library(dplyr)
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(c(Volume = Volume, SA = SA, DL = DL))
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(c(Volume = Volume, SA = SA, DL = DL))
}
Cube(10)
Cube(12)
Cube(6)
Cube(10)
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(c(Volume = Volume, SA = SA, DL = DL))
} # be wary of braces
Cube(10)
Cube(12)
Cube(6)
Cube(10)
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(data.frame(Volume = Volume, SA = SA, DL = DL))
}
Cube(c(10,12,6))
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(data.frame(Volume = Volume, SA = SA, DL = DL))
}
Cube(c(10,12,6))
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(c(Volume = Volume, SA = SA, DL = DL))
} # be wary of braces
Cube(10)
Cube(12)
Cube(6)
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(c(Volume = Volume, SA = SA, DL = DL))
} # be wary of braces
Cube(10)
Cube(12)
Cube(6)
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(c(Volume = Volume, SA = SA, DL = DL))
} # be wary of braces
Cube(10)
Cube(12)
Cube(6)
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(c(Volume = Volume, SA = SA, DL = DL))
}
Cube(10)
Cube(12)
Cube(6)
Cube <- function(e) {
Volume <- e^3
SA <- 6*e^2
DL <- e*sqrt(3)
return(data.frame(Volume = Volume, SA = SA, DL = DL))
}
Cube(c(10,12,6))
X <- c("Raymond","Twenty", "Boston", "Eastern") # All items in the vector are character strings
Y <- c(121, 128, 89, 11, 56 ) # All items in the vector are integers
V1 <- c(12, 33, 2, 82, 33) # All objects are integers V1
V2 <- c(.002, 3.6, 7.32, 4.5, 6.0) # All objects are doubles V2
V3 <- c(FALSE,TRUE,TRUE,FALSE) # All objects are logical entries V3
V4 <- c("JANE", "BILL", "JUAN", "EILEEN", "ANN") V4 # All objects are character strings
A <- list( 36, "big". TRUE, list(2,"two", FALSE) ),
A <- list( 36, "big" TRUE, list(2,"two", FALSE) ),
L1 <- list(6, 3.8, "every", TRUE) L1
L1 <- list(6, 3.8, "every", TRUE)
L2 <- list(TRUE, 12, .0125, "cat", list(2:5)) # note that a list L2 # can contain another list
typeof(c(11,15,20.5,37))
length(c(11,15,20.5,37))
AA <- (c("apple", "grape", "peach", "plum", "banana")) AA
L1 <- list(6, 3.8, "every", TRUE)
L2 <- list(TRUE, 12, .0125, "cat", list(2:5)) # note that a list L2 # can contain another list
typeof(c(11,15,20.5,37))
length(c(11,15,20.5,37))
AA <- (c("apple", "grape", "peach", "plum", "banana"))
typeof(AA)
length(AA)
M <- list("ALICE", 2:12, TRUE, 95) M
M <- list("ALICE", 2:12, TRUE, 95)
length(M) # What happens when typeof is applied to M ?
set_names(c("Boston","Baltimore","Atlanta", "New York","Cleveland")) set_names(c(14,12,.003,6,20))
set_names(c("Boston","Baltimore","Atlanta", "New York","Cleveland"))
set_names(c(14,12,.003,6,20))
set_names(5:7, c("m", "n", "p"))
M <- list("ALICE", 2:12, TRUE, 95)
length(M) # What happens when typeof is applied to M ?
typeof(M)
X <- c("Boston","Baltimore","Atlanta", "New York","Cleveland")
X <- c("Boston","Baltimore","Atlanta", "New York","Cleveland")
X
X[1]
X[c(2,4)]
X[c(2,2,2)]
X[-4]
U <- c(10, 3, NA, 5, 8, 1, NA)
U
U[is.na(U)]
U[!is.na(U)]
U <- c(10, 3, NA, 5, 8, 1, NA)
U
U[U %%2 == 0 & !is.na(U)]
U[U > 2]
U <- c(10, 3, NA, 5, 8, 1, NA)
U
U[!(U > 5) & !is.na(U)]
U[]
Y <- list("ball", 25, 12.25, FALSE, b = 1:5, c = list(-1, "west"))
Y
str(Y)
Y <- list("ball", 25, 12.25, FALSE, b = 1:5, c = list(-1, "west"))
Y
str(Y[[1]])
str(Y[[4]])
str(Y[[6]])
str(Y[['c']])
Y$c
Y$b
Y <- list("ball", 25, 12.25, FALSE, b = 1:5, c = list(-1, "west")) Y
Y <- list("ball", 25, 12.25, FALSE, b = 1:5, c = list(-1, "west"))
Y
Y$1
Y$"ball"
Y <- list(k = "ball", 25, 12.25, FALSE, b = 1:5, c = list(-1, "west"))
Y
Y$k
Y <- list("ball", 25, 12.25, FALSE, b = 1:5, c = list(-1, "west"))
Y
str(Y[1:3])
str(Y[5:6])
str(Y[ ])
mtcars
str(Y[1:3])
str(Y[5:6])
str(Y[ ])
median(mtcars$mpg)
median(mtcars$cyl)
median(mtcars$disp)
median(mtcars$hp)
median(mtcars$drat)
median(mtcars$wt)
median(mtcars$qsec)
median(mtcars$vs)
mean(mtcars$am)# two more
output2 <- vector("double", ncol(mtcars)) {
output2 <- vector("double", ncol(mtcars)) {
output2 <- vector("double", ncol(mtcars))
for (i in seq_along(mtcars)){
output2[[i]] <- median(mtcars[[i]])
}
output2 <- vector("double", ncol(mtcars))
for (i in seq_along(mtcars)){
output2[[i]] <- median(mtcars[[i]])
}
output2
map_dbl(mtcars, median)
map_dbl(mtcars, sd)
mtcars
map_dbl(mtcars, sd) -> X X
map_dbl(mtcars, sd) -> X X
map_dbl(mtcars, sd) -> X
X
round(X, digits = 1)
round(map_dbl(mtcars, sd), digits = 1)
map_dbl(mtcars, max)
mtcars %>%
map_dbl(median)
mtcars
mtcars %>% map(~. + 3)
mtcars %>%
map_dbl(min)
mtcars %>%
map_dbl(min)
mtcars
factor(mtcars$cyl)
models <- mtcars %>% split(.$cyl) %>% map(~lm(mpg ~ wt, data = .))
models
models %>%
map(summary)
models %>%
map(summary) %>%
map_dbl(~.$r.squared)
models %>%
map(summary) %>%
map_dbl("r.squared")
models %>%
map(summary) %>%
map_dbl(~.$r.squared) -> models1
models1
mtcars %>%
map_dbl(mean)
mtcars %>%
map(~. + 3) # add three to every element
mtcars
mtcars %>%
map(~. + 3) # add three to every element
models %>%
map(summary)
models %>%
map(summary) %>%
map_dbl(~.$r.squared)
models1 -> xx
xx^0.5
sqrt(models1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
V <- c("Bears", "Lions", "Dolphins", "Eagles", "Bengals")
V[3]
V[c(1,3,5)]
V[2:5]
V[-1]
length(K)
K <- list( x = 3:7, "never", 43, y = list(10,20,30))
length(K)
K$c
K$y
K$[]
K[]
tribble( ~x, ~y, ~w, ~z,
210, 300, 220, 180,
102, 100, 119, 187,
176, 175, 188, 173,
87, 95, 91, 94,
202, 210, 234, 218,
110, 122, 131, 128,
) -> dt
map_dbl(dt, mean)
map_dbl(dt, sd)
map_dbl(dt, exp(0.5))
dt %>%
map(sqrt())
map(dt, sqrt())
dt %>%
map(sqrt)
dt %>%
map(summary)
x <- list(26, 32, 45, 50, 65, 77, 82)
y <- list(30, 43, 50, 58, 62, 71, 88)
dt %>%
map(sum)
x + y
str([y])
K <- list( x = 3:7, "never", 43, y = list(10,20,30))
str([y])
str(K[y])
str(K['y'])
sum(x,y)
str(K[])
map_int(x, sum)
filePath <- "http://www.sthda.com/sthda/RDoc/example-files/martin-luther-king-i-have-a-dream-speech.txt"
text <- readLines(filePath)
# Load the data as a corpus
docs <- Corpus(VectorSource(text))
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
# Load the data as a corpus
docs <- Corpus(VectorSource(text))
inspect(docs)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
install.packages("rvest")
library(rvest)
library(tidyverse)
library(dplyr)
wikiurl <- read_html(
"https://en.wikipedia.org/wiki/List_of_highest-grossing_films")
datatables <- wikiurl%>%
html_table(., fill = T)
datatables[[4]] -> dt
dt
wikiurl <- read_html(
"https://en.wikipedia.org/wiki/List_of_highest-grossing_films")
datatables <- wikiurl%>%
html_table(., fill = T)
datatables[[2]] -> dt
dt
View(dt)
wikiurl <- read_html(
"https://www.worldometers.info/world-population/population-by-country/")
datatables1 <- wikiurl%>%
html_table(., fill = T)
datatables1[[1]] -> dt1
dt1
print(dt1, n = 100)
wikiurl <- read_html("https://www.mlb.com/stats/2019")
baseballdata2019 <- wikiurl%>%
html_table(., fill = T)
baseballdata2019[[1]] -> BD2019
BD2019
# Let's print all 25 rows
BD2019%>%
print(n = 25)
mean(BD2019$HRHR)
lm(ABAB ~ HH, BD2019)
BD2019 <- data.frame(baseballdata2019[[1]])
BD2019
View(BD2019)
